"use strict";(self.webpackChunkblah_blah=self.webpackChunkblah_blah||[]).push([[173],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),u=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(a),p=n,f=d["".concat(i,".").concat(p)]||d[p]||h[p]||l;return a?r.createElement(f,o(o({ref:t},c),{},{components:a})):r.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:n,o[1]=s;for(var u=2;u<l;u++)o[u]=a[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3543:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>I,contentTitle:()=>N,default:()=>S,frontMatter:()=>x,metadata:()=>O,toc:()=>P});var r=a(7462),n=a(7294),l=a(3905),o=a(6010),s=a(2466),i=a(6550),u=a(1980),c=a(7392),d=a(12);function h(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:a,attributes:r,default:n}}=e;return{value:t,label:a,attributes:r,default:n}}))}function p(e){const{values:t,children:a}=e;return(0,n.useMemo)((()=>{const e=t??h(a);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,a])}function f(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:a}=e;const r=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:t,groupId:a});return[(0,u._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(r.location.search);t.set(l,e),r.replace({...r.location,search:t.toString()})}),[l,r])]}function m(e){const{defaultValue:t,queryString:a=!1,groupId:r}=e,l=p(e),[o,s]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=a.find((e=>e.default))??a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:l}))),[i,u]=b({queryString:a,groupId:r}),[c,h]=function(e){let{groupId:t}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,l]=(0,d.Nk)(a);return[r,(0,n.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:r}),m=(()=>{const e=i??c;return f({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{m&&s(m)}),[m]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!f({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),h(e)}),[u,h,l]),tabValues:l}}var g=a(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:a,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),h=e=>{const t=e.currentTarget,a=c.indexOf(t),r=u[a].value;r!==l&&(d(t),i(r))},p=e=>{let t=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;t=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;t=c[a]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},t)},u.map((e=>{let{value:t,label:a,attributes:s}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:h},s,{className:(0,o.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":l===t})}),a??t)})))}function k(e){let{lazy:t,children:a,selectedValue:r}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function w(e){const t=m(e);return n.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},n.createElement(v,(0,r.Z)({},e,t)),n.createElement(k,(0,r.Z)({},e,t)))}function B(e){const t=(0,g.Z)();return n.createElement(w,(0,r.Z)({key:String(t)},e))}const T={tabItem:"tabItem_Ymn6"};function E(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(T.tabItem,r),hidden:a},t)}const x={title:"Blah-Blah",sidebar_label:"Home",slug:"/"},N='<img src={require("./images/sunglass.png").default} width="35" /> Blah-Blah',O={unversionedId:"index",id:"index",title:"Blah-Blah",description:"Blah-Blah is a Kotlin Multiplatform (KMP) library designed to generates fake data for robust testing and development. It can be used for things such as:",source:"@site/docs/index.mdx",sourceDirName:".",slug:"/",permalink:"/blahblah/",draft:!1,tags:[],version:"current",frontMatter:{title:"Blah-Blah",sidebar_label:"Home",slug:"/"},sidebar:"sidebar",next:{title:"Getting Started",permalink:"/blahblah/guides/getting-started"}},I={},P=[{value:"Features",id:"features",level:2},{value:"Why Blah-Blah?",id:"why-blah-blah",level:2},{value:"Library Flowchart",id:"library-flowchart",level:2},{value:"Examples",id:"examples",level:2}],V={toc:P},j="wrapper";function S(e){let{components:t,...n}=e;return(0,l.kt)(j,(0,r.Z)({},V,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"-blah-blah"},(0,l.kt)("img",{src:a(6855).Z,width:"35"})," Blah-Blah"),(0,l.kt)("p",null,"Blah-Blah is a Kotlin Multiplatform (KMP) library designed to generates fake data for robust testing and development. It can be used for things such as:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Unit Testing"),(0,l.kt)("li",{parentName:"ul"},"Performance Testing"),(0,l.kt)("li",{parentName:"ul"},"Building Demos"),(0,l.kt)("li",{parentName:"ul"},"Working without a completed backend")),(0,l.kt)("p",null,"Blah-Blah's flexibility and compatibility with Kotlin Multiplatform make it an essential tool for creating high-quality applications that are thoroughly tested and well-prepared for dynamic development demands."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It generates realistic data, enabling effective scenario simulation without relying on actual data sources."),(0,l.kt)("li",{parentName:"ul"},"The library provides a solid foundation for robust testing by offering diverse datasets that mimic real-world scenarios."),(0,l.kt)("li",{parentName:"ul"},"Blah-Blah supports Kotlin Multiplatform.")),(0,l.kt)("h2",{id:"why-blah-blah"},"Why Blah-Blah?"),(0,l.kt)("p",null,"Blah-Blah can create fake data that looks like real information. This helps you test and build things without needing actual data."),(0,l.kt)("p",null,"If you're showing off your app, BlahBlah can make fake data that looks real. This makes your demos look better and more interesting."),(0,l.kt)("p",null,"BlahBlah works with different types of platforms, like Android and iOS, which makes it easier to share code."),(0,l.kt)("p",null,"BlahBlah speeds up how fast you can build things by giving you fake data to start with. You don't need a real backend right away."),(0,l.kt)("h2",{id:"library-flowchart"},"Library Flowchart"),(0,l.kt)("mermaid",{value:"flowchart LR\n    K[(Resource)] --\x3e H[YAML Parser]\n    H --\x3e N[YAML Provider] --\x3e F[Blah-Blah Provider]\n    F --\x3e A[Module]\n    A[Module] --\x3e B[(BlahBlah)]"}),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)(B,{defaultValue:"kotlin",groupId:"meteor-architecture",values:[{label:"Kotlin",value:"kotlin"}],mdxType:"Tabs"},(0,l.kt)(E,{value:"kotlin",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kt"},"\nclass BlahBlahTest {\n\n    private lateinit var blah: BlahBlah\n\n    @BeforeTest\n    fun setup() {\n        blah = blah()\n    }\n\n    @Test\n    fun `check the blah blah works properly`() {\n        val city = blah.address.city\n        val state = blah.address.state\n\n        assertNotNull(city)\n        assertNotNull(state)\n    }\n\n    @Test\n    fun `check the street address gets successfully`() {\n        val streetAddress = blah.address.streetAddress\n\n\n        assertNotNull(streetAddress)\n        assertTrue(streetAddress.isDigit())\n    }\n}\n")))))}S.isMDXComponent=!0},6855:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/sunglass-cf95a2ab101158b9a1f57cc116594407.png"}}]);